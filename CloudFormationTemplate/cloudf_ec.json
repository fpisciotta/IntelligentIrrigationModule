  {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "Create a Python Application Stack",
      "Parameters": {
          "VpcId": {
              "Type": "String",
              "Default": "vpc-05d93061",
              "Description": "Vpc Id to deploy to",
              "AllowedPattern": "^vpc-[0-9a-fA-F]{8,8}"
          },
          "webdnsprefix": {
              "Default": "web.smartfarm.test",
              "Description": "Web DNS prefix",
              "Type": "String"
          },
          "webdnszone": {
              "Default": "test",
              "Description": "Web DNS zone ID",
              "Type": "String"
          },
          "KeyName": {
              "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
              "Type": "String",
              "Default": "test"
          },
          "keyNtwk": {
              "Description": "Network (gdsn,lab,shared)",
              "Type": "String",
              "Default": "shared",
              "AllowedPattern": "gdsn|lab|shared"
          },
          "keyEnv": {
              "Description": "Environment (beta, dev, lab, shared, qa, prod, int)",
              "Type": "String",
              "Default": "dev",
              "AllowedPattern": "beta|dev|lab|prod|qa|int"
          },
          "keySubntwkset": {
              "Description": "Subnet set",
              "Type": "String",
              "Default": "default",
              "AllowedPattern": "default"
          },
          "keysubtenant": {
              "Description": "Subtenant",
              "Type": "String",
              "Default": "tenant",
              "AllowedPattern": "tenant"
          },
          "keyApp": {
              "Description": "App",
              "Type": "String",
              "Default": "Default",
              "AllowedPattern": ".{1,16}"
          },
          "keyTier": {
              "Description": "Tier",
              "Type": "String",
              "Default": "pro",
              "AllowedPattern": "pub|pro|pri"
          },
          "keyAz": {
              "Description": "AZ for tag",
              "Type": "String",
              "Default": "1a",
              "AllowedPattern": "1[a-z]"
          },
          "keySupport": {
              "Description": "Support",
              "Type": "String",
              "Default": "devops",
              "AllowedPattern": "netops|devops|sysops"
          },
          "keyOs": {
              "Description": "Operating System",
              "Type": "String",
              "Default": "3",
              "AllowedPattern": ".{1,10}"
          },
          "keyRole": {
              "Description": "Role",
              "Type": "String",
              "Default": "Role",
              "AllowedPattern": ".{0,10}"
          },
          "keyDb": {
              "Description": "DB",
              "Type": "String",
              "Default": "NA",
              "AllowedPattern": ".{0,8}"
          },
          "keyShutdowntime": {
              "Description": "Shutdown Time",
              "Type": "String",
              "Default": "23",
              "AllowedPattern": "([01][0-9])|(2[0-3])|exempt"
          },
          "keyCmdb": {
              "Description": "CMDB (yes/no)",
              "Type": "String",
              "Default": "no",
              "AllowedPattern": "yes|no|y|n"
          },
          "keySysmon": {
              "Description": "Standard Monitoring?",
              "Type": "String",
              "Default": "no",
              "AllowedPattern": "yes|no|y|n"
          },
          "keyBkp": {
              "Description": "Backup Group (A-Z)",
              "Type": "String",
              "Default": "Z",
              "AllowedPattern": "[A-Z]"
          },
          "keyRet": {
              "Description": "Retention Days",
              "Type": "String",
              "Default": "7",
              "AllowedPattern": "[1-7]"
          },
          "keyBkv": {
              "Description": "Backup Volumes",
              "Type": "String",
              "Default": "all"
          },
          "InstanceWebQty": {
              "Description": "Quantity of Web servers",
              "Type": "Number",
              "Default": "2"
          },
          "InstanceWebDesiredQty": {
              "Description": "Quantity of Web servers",
              "Type": "Number",
              "Default": "1"
          },
          "InstanceWebType": {
              "Description": "Web EC2 instance type",
              "Type": "String",
              "Default": "t1.micro",
              "AllowedValues": [
                  "t1.micro",
                  "m1.small",
                  "m1.medium",
                  "m1.large",
                  "m1.xlarge",
                  "m2.xlarge",
                  "m2.2xlarge",
                  "m2.4xlarge",
                  "m3.xlarge",
                  "m3.2xlarge",
                  "c1.medium",
                  "c1.xlarge",
                  "cc1.4xlarge",
                  "cc2.8xlarge",
                  "cg1.4xlarge"
              ],
              "ConstraintDescription": "must be a valid EC2 instance type."
          },
          "InstanceWebAmi": {
              "Description": "AMI ID for web servers",
              "Type": "String",
              "Default": "ami-642bba0d",
              "AllowedPattern": "^ami-[0-9a-fA-F]{8,8}"
          },
          "InstanceWebName": {
              "Description": "Name of the web servers (without the unique number)",
              "Type": "String",
              "Default": "vir-43b73f24",
              "AllowedPattern": "^vir-[0-9a-fA-F]{8,8}"
          },
          "InstanceWebSubnets": {
              "Type": "CommaDelimitedList",
              "Default": "subnet-52d3ee25",
              "Description": "The list of SubnetIds for the web servers"
          },
          "ELBInternetSubnets": {
              "Type": "CommaDelimitedList",
              "Default": "subnet-52d3ee25,subnet-bfc692e6",
              "Description": "The list of SubnetIds for internet subnets"
          },
          "InstanceWebAZs": {
              "Type": "CommaDelimitedList",
              "Default": "us-east-1a",
              "Description": "The list of Availability Zones for the web servers"
          },
          "MultiAZDatabase": {
              "Default": "false",
              "Description": "Create a multi-AZ MySQL Amazon RDS database instance",
              "Type": "String",
              "AllowedValues": [
                  "true",
                  "false"
              ],
              "ConstraintDescription": "must be either true or false."
          },
          "DBSubnets": {
              "Type": "CommaDelimitedList",
              "Default": "subnet-52d3ee25,subnet-bfc692e6",
              "Description": "The list of SubnetIds, one in each Availability Zone for the region in your Virtual Private Cloud (VPC) for the Database"
          },
          "DBClass": {
              "Default": "db.t2.micro",
              "Description": "Database instance class",
              "Type": "String",
              "AllowedValues": [
                  "db.t2.micro",
                  "db.m1.small",
                  "db.m1.large",
                  "db.m1.xlarge",
                  "db.m2.xlarge",
                  "db.m2.2xlarge",
                  "db.m2.4xlarge"
              ],
              "ConstraintDescription": "must select a valid database instance type."
          },
          "DBName": {
              "Description": "The database name",
              "Type": "String",
              "Default": "SampleDB",
              "MinLength": "1",
              "MaxLength": "64",
              "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
              "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
          },
          "DBUsername": {
              "Description": "The database admin account username",
              "Type": "String",
              "Default": "root",
              "MinLength": "1",
              "MaxLength": "16",
              "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
              "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
          },
          "DBPassword": {
              "NoEcho": "true",
              "Description": "The database admin account password",
              "Type": "String",
              "Default": "shshnkvadali",
              "MinLength": "8",
              "MaxLength": "41",
              "AllowedPattern": "[a-zA-Z0-9]*",
              "ConstraintDescription": "must contain only alphanumeric characters."
          },
          "DBAllocatedStorage": {
              "Default": "5",
              "Description": "The size of the database (Gb)",
              "Type": "Number",
              "MinValue": "5",
              "MaxValue": "1024",
              "ConstraintDescription": "must be between 5 and 1024Gb."
          }
      },
      "Resources": {
          "ElasticLoadBalancer": {
              "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
              "Metadata": {
                  "Comment": "Web server ELB"
              },
              "Properties": {
                  "Scheme": "internet-facing",
                  "Subnets": {
                      "Ref": "ELBInternetSubnets"
                  },
                  "LBCookieStickinessPolicy": [
                      {
                          "PolicyName": "CookieBasedPolicy",
                          "CookieExpirationPeriod": "30"
                      }
                  ],
                  "Listeners": [
                      {
                          "LoadBalancerPort": "80",
                          "InstancePort": "80",
                          "Protocol": "HTTP",
                          "PolicyNames": [
                              "CookieBasedPolicy"
                          ]
                      }
                  ],
                  "HealthCheck": {
                      "Target": "HTTP:80/",
                      "HealthyThreshold": "2",
                      "UnhealthyThreshold": "5",
                      "Interval": "10",
                      "Timeout": "5"
                  }
              }
          },
          "WebServerSecurityGroup": {
              "Type": "AWS::EC2::SecurityGroup",
              "Properties": {
                  "VpcId": {
                      "Ref": "VpcId"
                  },
                  "GroupDescription": "Sample Django App Web Server",
                  "SecurityGroupIngress": [
                      {
                          "IpProtocol": "tcp",
                          "FromPort": "22",
                          "ToPort": "22",
                          "CidrIp": "0.0.0.0/0"
                      },
                      {
                          "IpProtocol": "tcp",
                          "FromPort": "80",
                          "ToPort": "80",
                          "CidrIp": "0.0.0.0/0"
                      },
                      {
                          "IpProtocol": "tcp",
                          "FromPort": "443",
                          "ToPort": "443",
                          "CidrIp": "0.0.0.0/0"
                      }
                  ]
              }
          },
          "WebServerGroup": {
              "Type": "AWS::AutoScaling::AutoScalingGroup",
              "Properties": {
                  "AvailabilityZones": {
                      "Ref": "InstanceWebAZs"
                  },
                  "VPCZoneIdentifier": {
                      "Ref": "InstanceWebSubnets"
                  },
                  "LaunchConfigurationName": {
                      "Ref": "LaunchConfig"
                  },
                  "MinSize": "1",
                  "MaxSize": {
                      "Ref": "InstanceWebQty"
                  },
                  "DesiredCapacity": {
                      "Ref": "InstanceWebDesiredQty"
                  },
                  "LoadBalancerNames": [
                      {
                          "Ref": "ElasticLoadBalancer"
                      }
                  ],
                  "Tags": [
                      {
                          "Key": "Name",
                          "Value": {
                              "Ref": "InstanceWebName"
                          },
                          "PropagateAtLaunch": true
                      },
                      {
                          "Key": "ProvisioningKey",
                          "Value": {
                              "Fn::Join": [
                                  "",
                                  [
                                      "ntwk=",
                                      {
                                          "Ref": "keyNtwk"
                                      },
                                      ":env=",
                                      {
                                          "Ref": "keyEnv"
                                      },
                                      ":tenant=",
                                      {
                                          "Ref": "keyTenant"
                                      },
                                      ":subntwkset=",
                                      {
                                          "Ref": "keySubntwkset"
                                      },
                                      ":subtenant=",
                                      {
                                          "Ref": "keyTenant"
                                      },
                                      ":app=",
                                      {
                                          "Ref": "keyApp"
                                      },
                                      ":tier=",
                                      {
                                          "Ref": "keyTier"
                                      },
                                      ":az=",
                                      {
                                          "Ref": "keyAz"
                                      }
                                  ]
                              ]
                          },
                          "PropagateAtLaunch": true
                      },
                      {
                          "Key": "TrackingKey",
                          "Value": {
                              "Fn::Join": [
                                  "",
                                  [
                                      "Support=",
                                      {
                                          "Ref": "keySupport"
                                      },
                                      ":CreatedBy=",
                                      {
                                          "Ref": "keyCreatedby"
                                      },
                                      ":cofa=",
                                      {
                                          "Ref": "keyCofa"
                                      },
                                      ":os=",
                                      {
                                          "Ref": "keyOs"
                                      },
                                      ":role=",
                                      {
                                          "Ref": "keyRole"
                                      },
                                      ":db=",
                                      {
                                          "Ref": "keyDb"
                                      },
                                      ":shutdown_time=",
                                      {
                                          "Ref": "keyShutdowntime"
                                      },
                                      ":cmdb=",
                                      {
                                          "Ref": "keyCmdb"
                                      },
                                      ":sys_mon=",
                                      {
                                          "Ref": "keySysmon"
                                      },
                                      ":SLA=",
                                      {
                                          "Ref": "keySla"
                                      },
                                      ":BKP=",
                                      {
                                          "Ref": "keyBkp"
                                      },
                                      ":RET=",
                                      {
                                          "Ref": "keyRet"
                                      },
                                      ":BKV=",
                                      {
                                          "Ref": "keyBkv"
                                      }
                                  ]
                              ]
                          },
                          "PropagateAtLaunch": true
                      }
                  ]
              }
          },
          "WebServerScaleUpPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
          "Cooldown" : "60",
          "ScalingAdjustment" : "1"
        }
      },
      "WebServerScaleDownPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
          "Cooldown" : "60",
          "ScalingAdjustment" : "-1"
        }
      },
      "CPUAlarmHigh": {
       "Type": "AWS::CloudWatch::Alarm",
       "Properties": {
          "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "300",
          "EvaluationPeriods": "2",
          "Threshold": "90",
          "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WebServerGroup" }
            }
          ],
          "ComparisonOperator": "GreaterThanThreshold"
        }
      },
      "CPUAlarmLow": {
       "Type": "AWS::CloudWatch::Alarm",
       "Properties": {
          "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "300",
          "EvaluationPeriods": "2",
          "Threshold": "70",
          "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WebServerGroup" }
            }
          ],
          "ComparisonOperator": "LessThanThreshold"
        }
      },
          "LaunchConfig": {
              "Type": "AWS::AutoScaling::LaunchConfiguration",
              "Metadata": {
                  "AWS::CloudFormation::Init": {
                      "config": {
                          "files": {
                              "/tmp/instanceinfo": {
                                  "content": {
                                      "Fn::Join": [
                                          "",
                                          [
                                              "dbAddress:",
                                              {
                                                  "Fn::GetAtt": [
                                                      "DBInstance",
                                                      "Endpoint.Address"
                                                  ]
                                              },
                                              "\n",
                                              "env:",
                                              {
                                                  "Ref": "keyEnv"
                                              },
                                              "\n",
                                              "dbName:",
                                              {
                                                  "Ref": "DBName"
                                              },
                                              "\n",
                                              "dbUser:",
                                              {
                                                  "Ref": "DBUsername"
                                              },
                                              "\n",
                                              "dbPass:",
                                              {
                                                  "Ref": "DBPassword"
                                              },
                                              "\n"
                                          ]
                                      ]
                                  },
                                  "mode": "000644",
                                  "owner": "root",
                                  "group": "root"
                              }
                          },
                          "commands": {
                              "a-os-install": {
                                  "command": "/tmp/ossetup > /tmp/ossetup.log"
                              },
                              "b-app-install": {
                                  "command": "/tmp/django_app_installer > /var/log/django_app_installer.log"
                              }
                          }
                      }
                  }
              },
              "Properties": {
                  "ImageId": {
                      "Ref": "InstanceWebAmi"
                  },
                  "SecurityGroups": [
                      {
                          "Ref": "WebServerSecurityGroup"
                      }
                  ],
                  "InstanceType": {
                      "Ref": "InstanceWebType"
                  },
                  "KeyName": {
                      "Ref": "KeyName"
                  },
                  "UserData": {
                      "Fn::Base64": {
                          "Fn::Join": [
                              "",
                              [
                                  "#!/bin/bash\n",
                                  "wget -O /tmp/ossetup --no-check-certificate https://s3.amazonaws.com/sample-django-cf-scripts/os_pkg_installer\n",
                                  "chmod 755 /tmp/ossetup\n",
                                  "wget -O /tmp/django_app_installer --no-check-certificate https://s3.amazonaws.com/sample-django-cf-scripts/django_app_installer\n",
                                  "chmod 755 /tmp/django_app_installer\n",
                                  "cfn-init -s ",
                                  {
                                      "Ref": "AWS::StackId"
                                  },
                                  " -r LaunchConfig ",
                                  "         --region ",
                                  {
                                      "Ref": "AWS::Region"
                                  },
                                  "\n"
                              ]
                          ]
                      }
                  }
              }
          },
          "DBSecurityGroup": {
              "Type": "AWS::RDS::DBSecurityGroup",
              "Properties": {
                  "EC2VpcId": {
                      "Ref": "VpcId"
                  },
                  "DBSecurityGroupIngress": [
                      {
                          "EC2SecurityGroupId": {
                              "Ref": "WebServerSecurityGroup"
                          }
                      }
                  ],
                  "GroupDescription": "Web Server Access"
              }
          },
          "MyDBSubnetGroup": {
              "Type": "AWS::RDS::DBSubnetGroup",
              "Properties": {
                  "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                  "SubnetIds": {
                      "Ref": "DBSubnets"
                  }
              }
          },
          "DBInstance": {
              "Type": "AWS::RDS::DBInstance",
              "Properties": {
                  "DBName": {
                      "Ref": "DBName"
                  },
                  "Engine": "MySQL",
                  "MultiAZ": {
                      "Ref": "MultiAZDatabase"
                  },
                  "MasterUsername": {
                      "Ref": "DBUsername"
                  },
                  "DBInstanceClass": {
                      "Ref": "DBClass"
                  },
                  "AllocatedStorage": {
                      "Ref": "DBAllocatedStorage"
                  },
                  "MasterUserPassword": {
                      "Ref": "DBPassword"
                  },
                  "DBSubnetGroupName": {
                      "Ref": "MyDBSubnetGroup"
                  },
                  "DBSecurityGroups": [
                      {
                          "Ref": "DBSecurityGroup"
                      }
                  ]
              }
          }
      }
  }

